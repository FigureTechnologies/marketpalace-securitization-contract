(function() {
    var type_impls = Object.fromEntries([["contract",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Response%3CT%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Response%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Response&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Response&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/clone.rs.html#174\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","contract::core::aliases::ProvResponse"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Response%3CT%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Response%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Response&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","contract::core::aliases::ProvResponse"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Response%3CT%3E\" class=\"impl\"><a href=\"#impl-Default-for-Response%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for Response&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Response&lt;T&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.83.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","contract::core::aliases::ProvResponse"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Response%3CT%3E\" class=\"impl\"><a href=\"#impl-Deserialize%3C'de%3E-for-Response%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for Response&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.215/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;__D&gt;(\n    __deserializer: __D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Response&lt;T&gt;, &lt;__D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.215/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.215/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","contract::core::aliases::ProvResponse"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-JsonSchema-for-Response%3CT%3E\" class=\"impl\"><a href=\"#impl-JsonSchema-for-Response%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; JsonSchema for Response&lt;T&gt;<div class=\"where\">where\n    T: JsonSchema,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.schema_name\" class=\"method trait-impl\"><a href=\"#method.schema_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">schema_name</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>The name of the generated JSON Schema. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.schema_id\" class=\"method trait-impl\"><a href=\"#method.schema_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">schema_id</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'static, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns a string that uniquely identifies the schema produced by this type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.json_schema\" class=\"method trait-impl\"><a href=\"#method.json_schema\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">json_schema</a>(gen: &amp;mut SchemaGenerator) -&gt; Schema</h4></section></summary><div class='docblock'>Generates a JSON Schema for this type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_referenceable\" class=\"method trait-impl\"><a href=\"#method.is_referenceable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_referenceable</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether JSON Schemas generated for this type should be re-used where possible using the <code>$ref</code> keyword. <a>Read more</a></div></details></div></details>","JsonSchema","contract::core::aliases::ProvResponse"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Response%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-Response%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for Response&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Response&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","contract::core::aliases::ProvResponse"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Response%3CT%3E\" class=\"impl\"><a href=\"#impl-Response%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Response&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; Response&lt;T&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_attribute\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_attribute</a>(\n    self,\n    key: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n    value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n) -&gt; Response&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Add an attribute included in the main <code>wasm</code> event.</p>\n<p>For working with optional values or optional attributes, see [<code>add_attributes</code>][Self::add_attributes].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_message\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_message</a>(self, msg: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;CosmosMsg&lt;T&gt;&gt;) -&gt; Response&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>This creates a “fire and forget” message, by using <code>SubMsg::new()</code> to wrap it,\nand adds it to the list of messages to process.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_submessage\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_submessage</a>(self, msg: SubMsg&lt;T&gt;) -&gt; Response&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>This takes an explicit SubMsg (creates via eg. <code>reply_on_error</code>)\nand adds it to the list of messages to process.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_event\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_event</a>(self, event: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;Event&gt;) -&gt; Response&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an extra event to the response, separate from the main <code>wasm</code> event\nthat is always created.</p>\n<p>The <code>wasm-</code> prefix will be appended by the runtime to the provided type\nof event.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_attributes\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_attributes</a>&lt;A&gt;(\n    self,\n    attrs: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = A&gt;,\n) -&gt; Response&lt;T&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;Attribute&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Bulk add attributes included in the main <code>wasm</code> event.</p>\n<p>Anything that can be turned into an iterator and yields something\nthat can be converted into an <code>Attribute</code> is accepted.</p>\n<h6 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h6>\n<p>Adding a list of attributes using the pair notation for key and value:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cosmwasm_std::Response;\n\n<span class=\"kw\">let </span>attrs = <span class=\"macro\">vec!</span>[\n    (<span class=\"string\">\"action\"</span>, <span class=\"string\">\"reaction\"</span>),\n    (<span class=\"string\">\"answer\"</span>, <span class=\"string\">\"42\"</span>),\n    (<span class=\"string\">\"another\"</span>, <span class=\"string\">\"attribute\"</span>),\n];\n<span class=\"kw\">let </span>res: Response = Response::new().add_attributes(attrs.clone());\n<span class=\"macro\">assert_eq!</span>(res.attributes, attrs);</code></pre></div>\n<p>Adding an optional value as an optional attribute by turning it into a list of 0 or 1 elements:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cosmwasm_std::{Attribute, Response};\n\n<span class=\"comment\">// Some value\n</span><span class=\"kw\">let </span>value: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"sarah\"</span>.to_string());\n<span class=\"kw\">let </span>attribute: <span class=\"prelude-ty\">Option</span>&lt;Attribute&gt; = value.map(|v| Attribute::new(<span class=\"string\">\"winner\"</span>, v));\n<span class=\"kw\">let </span>res: Response = Response::new().add_attributes(attribute);\n<span class=\"macro\">assert_eq!</span>(res.attributes, [Attribute {\n    key: <span class=\"string\">\"winner\"</span>.to_string(),\n    value: <span class=\"string\">\"sarah\"</span>.to_string(),\n}]);\n\n<span class=\"comment\">// No value\n</span><span class=\"kw\">let </span>value: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>attribute: <span class=\"prelude-ty\">Option</span>&lt;Attribute&gt; = value.map(|v| Attribute::new(<span class=\"string\">\"winner\"</span>, v));\n<span class=\"kw\">let </span>res: Response = Response::new().add_attributes(attribute);\n<span class=\"macro\">assert_eq!</span>(res.attributes.len(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_messages\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_messages</a>&lt;M&gt;(self, msgs: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = M&gt;) -&gt; Response&lt;T&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;CosmosMsg&lt;T&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Bulk add “fire and forget” messages to the list of messages to process.</p>\n<h6 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cosmwasm_std::{CosmosMsg, Response};\n\n<span class=\"kw\">fn </span>make_response_with_msgs(msgs: Vec&lt;CosmosMsg&gt;) -&gt; Response {\n    Response::new().add_messages(msgs)\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_submessages\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_submessages</a>(\n    self,\n    msgs: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = SubMsg&lt;T&gt;&gt;,\n) -&gt; Response&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Bulk add explicit SubMsg structs to the list of messages to process.</p>\n<h6 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cosmwasm_std::{SubMsg, Response};\n\n<span class=\"kw\">fn </span>make_response_with_submsgs(msgs: Vec&lt;SubMsg&gt;) -&gt; Response {\n    Response::new().add_submessages(msgs)\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_events\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_events</a>&lt;E&gt;(self, events: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = E&gt;) -&gt; Response&lt;T&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;Event&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Bulk add custom events to the response. These are separate from the main\n<code>wasm</code> event.</p>\n<p>The <code>wasm-</code> prefix will be appended by the runtime to the provided types\nof events.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_data\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_data</a>(self, data: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;Binary&gt;) -&gt; Response&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Set the binary data included in the response.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.change_custom\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">change_custom</a>&lt;U&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Response&lt;U&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Convert this [<code>Response&lt;T&gt;</code>] to a [<code>Response&lt;U&gt;</code>] with a different custom message type.\nThis allows easier interactions between code written for a specific chain and\ncode written for multiple chains.\nIf this contains a [<code>CosmosMsg::Custom</code>] submessage, the function returns <code>None</code>.</p>\n</div></details></div></details>",0,"contract::core::aliases::ProvResponse"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Response%3CT%3E\" class=\"impl\"><a href=\"#impl-Serialize-for-Response%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for Response&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;__S&gt;(\n    &amp;self,\n    __serializer: __S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;__S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;__S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","contract::core::aliases::ProvResponse"],["<section id=\"impl-Eq-for-Response%3CT%3E\" class=\"impl\"><a href=\"#impl-Eq-for-Response%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for Response&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","contract::core::aliases::ProvResponse"],["<section id=\"impl-StructuralPartialEq-for-Response%3CT%3E\" class=\"impl\"><a href=\"#impl-StructuralPartialEq-for-Response%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for Response&lt;T&gt;</h3></section>","StructuralPartialEq","contract::core::aliases::ProvResponse"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[25706]}