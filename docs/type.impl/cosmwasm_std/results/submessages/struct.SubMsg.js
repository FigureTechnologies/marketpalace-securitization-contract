(function() {
    var type_impls = Object.fromEntries([["contract_controller",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-SubMsg%3CT%3E\" class=\"impl\"><a href=\"#impl-Clone-for-SubMsg%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for SubMsg&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; SubMsg&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/clone.rs.html#174\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","contract_controller::core::aliases::ProvSubMsg"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-SubMsg%3CT%3E\" class=\"impl\"><a href=\"#impl-Debug-for-SubMsg%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for SubMsg&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","contract_controller::core::aliases::ProvSubMsg"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-SubMsg%3CT%3E\" class=\"impl\"><a href=\"#impl-Deserialize%3C'de%3E-for-SubMsg%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for SubMsg&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.215/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;__D&gt;(\n    __deserializer: __D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;SubMsg&lt;T&gt;, &lt;__D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.215/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.215/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","contract_controller::core::aliases::ProvSubMsg"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-JsonSchema-for-SubMsg%3CT%3E\" class=\"impl\"><a href=\"#impl-JsonSchema-for-SubMsg%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; JsonSchema for SubMsg&lt;T&gt;<div class=\"where\">where\n    T: JsonSchema,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.schema_name\" class=\"method trait-impl\"><a href=\"#method.schema_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">schema_name</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>The name of the generated JSON Schema. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.schema_id\" class=\"method trait-impl\"><a href=\"#method.schema_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">schema_id</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'static, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns a string that uniquely identifies the schema produced by this type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.json_schema\" class=\"method trait-impl\"><a href=\"#method.json_schema\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">json_schema</a>(gen: &amp;mut SchemaGenerator) -&gt; Schema</h4></section></summary><div class='docblock'>Generates a JSON Schema for this type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_referenceable\" class=\"method trait-impl\"><a href=\"#method.is_referenceable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_referenceable</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether JSON Schemas generated for this type should be re-used where possible using the <code>$ref</code> keyword. <a>Read more</a></div></details></div></details>","JsonSchema","contract_controller::core::aliases::ProvSubMsg"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-SubMsg%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-SubMsg%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for SubMsg&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;SubMsg&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","contract_controller::core::aliases::ProvSubMsg"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-SubMsg%3CT%3E\" class=\"impl\"><a href=\"#impl-Serialize-for-SubMsg%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for SubMsg&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;__S&gt;(\n    &amp;self,\n    __serializer: __S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;__S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;__S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.215/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","contract_controller::core::aliases::ProvSubMsg"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubMsg%3CT%3E\" class=\"impl\"><a href=\"#impl-SubMsg%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; SubMsg&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(msg: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;CosmosMsg&lt;T&gt;&gt;) -&gt; SubMsg&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a “fire and forget” message with the pre-0.14 semantics.\nSince this is just an alias for [<code>SubMsg::reply_never</code>] it is somewhat recommended\nto use the latter in order to make the behaviour more explicit in the caller code.\nBut that’s up to you for now.</p>\n<p>By default, the submessage’s gas limit will be unlimited. Use [<code>SubMsg::with_gas_limit</code>] to change it.\nSetting <code>payload</code> is not advised as this will never be used.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reply_on_success\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reply_on_success</a>(msg: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;CosmosMsg&lt;T&gt;&gt;, id: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u64.html\">u64</a>) -&gt; SubMsg&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>SubMsg</code> that will provide a <code>reply</code> with the given <code>id</code> if the message returns <code>Ok</code>.</p>\n<p>By default, the submessage’s <code>payload</code> will be empty and the gas limit will be unlimited. Use\n[<code>SubMsg::with_payload</code>] and [<code>SubMsg::with_gas_limit</code>] to change those.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reply_on_error\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reply_on_error</a>(msg: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;CosmosMsg&lt;T&gt;&gt;, id: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u64.html\">u64</a>) -&gt; SubMsg&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>SubMsg</code> that will provide a <code>reply</code> with the given <code>id</code> if the message returns <code>Err</code>.</p>\n<p>By default, the submessage’s <code>payload</code> will be empty and the gas limit will be unlimited. Use\n[<code>SubMsg::with_payload</code>] and [<code>SubMsg::with_gas_limit</code>] to change those.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reply_always\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reply_always</a>(msg: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;CosmosMsg&lt;T&gt;&gt;, id: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u64.html\">u64</a>) -&gt; SubMsg&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>SubMsg</code> that will always provide a <code>reply</code> with the given <code>id</code>.</p>\n<p>By default, the submessage’s <code>payload</code> will be empty and the gas limit will be unlimited. Use\n[<code>SubMsg::with_payload</code>] and [<code>SubMsg::with_gas_limit</code>] to change those.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reply_never\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reply_never</a>(msg: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;CosmosMsg&lt;T&gt;&gt;) -&gt; SubMsg&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>SubMsg</code> that will never <code>reply</code>. This is equivalent to standard message semantics.</p>\n<p>By default, the submessage’s gas limit will be unlimited. Use [<code>SubMsg::with_gas_limit</code>] to change it.\nSetting <code>payload</code> is not advised as this will never be used.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_gas_limit\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_gas_limit</a>(self, limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u64.html\">u64</a>) -&gt; SubMsg&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Add a gas limit to the submessage.\nThis gas limit measured in <a href=\"https://github.com/CosmWasm/cosmwasm/blob/main/docs/GAS.md\">Cosmos SDK gas</a>.</p>\n<h6 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>sub_msg: SubMsg = SubMsg::reply_always(msg, <span class=\"number\">1234</span>).with_gas_limit(<span class=\"number\">60_000</span>);\n<span class=\"macro\">assert_eq!</span>(sub_msg.id, <span class=\"number\">1234</span>);\n<span class=\"macro\">assert_eq!</span>(sub_msg.gas_limit, <span class=\"prelude-val\">Some</span>(<span class=\"number\">60_000</span>));\n<span class=\"macro\">assert_eq!</span>(sub_msg.reply_on, ReplyOn::Always);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_payload\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_payload</a>(self, payload: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;Binary&gt;) -&gt; SubMsg&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Add a payload to the submessage.</p>\n<h6 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>sub_msg: SubMsg = SubMsg::reply_always(msg, <span class=\"number\">1234</span>)\n    .with_payload(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(sub_msg.id, <span class=\"number\">1234</span>);\n<span class=\"macro\">assert_eq!</span>(sub_msg.payload, Binary::new(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]));\n<span class=\"macro\">assert_eq!</span>(sub_msg.reply_on, ReplyOn::Always);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.change_custom\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">change_custom</a>&lt;U&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;SubMsg&lt;U&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Convert this [<code>SubMsg&lt;T&gt;</code>] to a [<code>SubMsg&lt;U&gt;</code>] with a different generic type.\nThis allows easier interactions between code written for a specific chain and\ncode written for multiple chains.\nIf this is a [<code>CosmosMsg::Custom</code>] submessage, the function returns <code>None</code>.</p>\n</div></details></div></details>",0,"contract_controller::core::aliases::ProvSubMsg"],["<section id=\"impl-Eq-for-SubMsg%3CT%3E\" class=\"impl\"><a href=\"#impl-Eq-for-SubMsg%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for SubMsg&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","contract_controller::core::aliases::ProvSubMsg"],["<section id=\"impl-StructuralPartialEq-for-SubMsg%3CT%3E\" class=\"impl\"><a href=\"#impl-StructuralPartialEq-for-SubMsg%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for SubMsg&lt;T&gt;</h3></section>","StructuralPartialEq","contract_controller::core::aliases::ProvSubMsg"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[21831]}